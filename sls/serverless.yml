service: synonym
frameworkVersion: '3'

# Serverless Parameters: https://www.serverless.com/framework/docs/guides/parameters
custom:
  s3Bucket: ${param:s3Bucket}
  imageArn: ${param:imageArn}


provider:
  name: aws
  runtime: python3.8
  region: ap-northeast-1

package:
  patterns:
    - '!**'
    - 'src/**'

# Serverless AWS Lambda Functions: https://www.serverless.com/framework/docs/providers/aws/guide/functions/
functions:
  checkEndpoingInService:
    handler: src.check_endpoint.main.handler
    role: CheckSageMakerEndpointStatusFunctionRole
    runtime: python3.8
    memorySize: 256
    timeout: 600
    package:
      patterns:
        - '!**'
        - 'src/__init__.py'
        - 'src/check_endpoint/**'

# Serverless Step Functions: https://www.serverless.com/plugins/serverless-step-functions
stepFunctions:
  stateMachines:
    synonymFunc:
      role: 
        Fn::GetAtt: ["StateMachineRole", "Arn"]
      name: synonym-generator
      definition:
        Comment: Synonym Generator
        StartAt: SageMaker CreateTrainingJob
        States:
          SageMaker CreateTrainingJob:
            Next: SageMaker CreateModel
            Parameters:
              AlgorithmSpecification:
                TrainingImage:  ${self:custom.imageArn}
                TrainingInputMode: File
              EnableInterContainerTrafficEncryption: false
              EnableManagedSpotTraining: false
              EnableNetworkIsolation: false
              Environment:
                foo: bar
              HyperParameters:
                hoge: fuga
              InputDataConfig:
              - ChannelName: train
                CompressionType: None
                ContentType: text/plain
                DataSource:
                  S3DataSource:
                    S3DataDistributionType: FullyReplicated
                    S3DataType: S3Prefix
                    S3Uri: s3://${self:custom.s3Bucket}/synonym/data/
                InputMode: File
              OutputDataConfig:
                S3OutputPath: s3://${self:custom.s3Bucket}/synonym/model/
              ResourceConfig:
                InstanceCount: 1
                InstanceType: ml.m4.xlarge
                VolumeSizeInGB: 16
              RoleArn:
                Fn::GetAtt: ["SageMakerExecutionRole", "Arn"]
              StoppingCondition:
                MaxRuntimeInSeconds: 3600
              TrainingJobName.$: States.Format('synonym-{}', $$.Execution.Name)
            Resource: arn:aws:states:::sagemaker:createTrainingJob.sync
            ResultPath: $.training_result
            Type: Task
          SageMaker CreateModel:
            Next: SageMaker CreateEndpointConfig
            Parameters:
              EnableNetworkIsolation: false
              ExecutionRoleArn:
                Fn::GetAtt: ["SageMakerExecutionRole", "Arn"]
              ModelName.$: States.Format('synonym-{}', $$.Execution.Name)
              PrimaryContainer:
                Image: ${self:custom.imageArn}
                Mode: SingleModel
                ModelDataUrl.$: $.training_result.ModelArtifacts.S3ModelArtifacts
            Resource: arn:aws:states:::sagemaker:createModel
            ResultPath: $.model_result
            Type: Task
          SageMaker CreateEndpointConfig:
            Next: SageMaker CreateEndpoint
            Parameters:
              EndpointConfigName.$: States.Format('synonym-{}', $$.Execution.Name)
              ProductionVariants:
              - ModelName.$: States.Format('synonym-{}', $$.Execution.Name)
                ServerlessConfig:
                  MaxConcurrency: 20
                  MemorySizeInMB: 3072
                VariantName.$: States.Format('synonym-{}', $$.Execution.Name)
            Resource: arn:aws:states:::sagemaker:createEndpointConfig
            ResultPath: $.endpoint_config_result
            Type: Task
          SageMaker CreateEndpoint:
            Next: Check Endpoint Status InService
            Parameters:
              EndpointConfigName.$: States.Format('synonym-{}', $$.Execution.Name)
              EndpointName.$: States.Format('synonym-{}', $$.Execution.Name)
            Resource: arn:aws:states:::sagemaker:createEndpoint
            ResultPath: $.endpoint_result
            Type: Task
          Check Endpoint Status InService:
            End: true
            HeartbeatSeconds: 60
            Parameters:
              FunctionName:
                Fn::GetAtt: [checkEndpoingInService, Arn] 
              Payload:
                EndpointName.$: States.Format('synonym-{}', $$.Execution.Name)
            Resource: arn:aws:states:::lambda:invoke
            ResultPath: $.check_endpoint_status_result
            Retry:
            - BackoffRate: 1
              ErrorEquals:
              - States.ALL
              IntervalSeconds: 10
              MaxAttempts: 2
            TimeoutSeconds: 600
            Type: Task



resources:
  Resources:
    SageMakerExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: SynonymGeneratorSageMakerExecutionRole
        Path: /service-role/
        AssumeRolePolicyDocument:
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - sagemaker.amazonaws.com
              - states.amazonaws.com
              - events.amazonaws.com
              - apigateway.amazonaws.com
              - glue.amazonaws.com
              - lambda.amazonaws.com
              - codepipeline.amazonaws.com
              - cloudformation.amazonaws.com
              - codebuild.amazonaws.com
              - firehose.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/PowerUserAccess

    StateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: SynonymGeneratorStateMachineRole
        Path: /service-role/
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/PowerUserAccess
        Policies:
          - PolicyName: statePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Action:
                - iam:PassRole
                Condition:
                  StringEquals:
                    iam:PassedToService: sagemaker.amazonaws.com
                Effect: Allow
                Resource:
                - Fn::GetAtt: ["SageMakerExecutionRole", "Arn"]

    CheckSageMakerEndpointStatusFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CheckSageMakerEndpointStatusFunctionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole 
          - arn:aws:iam::aws:policy/PowerUserAccess

plugins:
  - serverless-step-functions